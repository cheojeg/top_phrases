// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: phrase.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createPhrase = `-- name: CreatePhrase :one
INSERT INTO phrases (
    owner, state, phrase, author, created_at
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, owner, state, phrase, author, created_at, published_at
`

type CreatePhraseParams struct {
	Owner     string    `json:"owner"`
	State     string    `json:"state"`
	Phrase    string    `json:"phrase"`
	Author    string    `json:"author"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreatePhrase(ctx context.Context, arg CreatePhraseParams) (Phrase, error) {
	row := q.db.QueryRowContext(ctx, createPhrase,
		arg.Owner,
		arg.State,
		arg.Phrase,
		arg.Author,
		arg.CreatedAt,
	)
	var i Phrase
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.State,
		&i.Phrase,
		&i.Author,
		&i.CreatedAt,
		&i.PublishedAt,
	)
	return i, err
}

const updatePhraseState = `-- name: UpdatePhraseState :one
UPDATE phrases
SET state = $2, published_at = $3
WHERE id = $1
RETURNING id, owner, state, phrase, author, created_at, published_at
`

type UpdatePhraseStateParams struct {
	ID          int64        `json:"id"`
	State       string       `json:"state"`
	PublishedAt sql.NullTime `json:"published_at"`
}

func (q *Queries) UpdatePhraseState(ctx context.Context, arg UpdatePhraseStateParams) (Phrase, error) {
	row := q.db.QueryRowContext(ctx, updatePhraseState, arg.ID, arg.State, arg.PublishedAt)
	var i Phrase
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.State,
		&i.Phrase,
		&i.Author,
		&i.CreatedAt,
		&i.PublishedAt,
	)
	return i, err
}
